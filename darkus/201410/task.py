#!/usr/bin/env python
from itertools import product
import sys

SYM_NUM = 4


def sequences(length, max_value):
    """
    Produces various length tuples from (0, 0, .., 0) to (n-1, n-1, .., n-1),
    where n = max_value
    """
    return product(range(max_value), repeat=length)


class MatrixExc(Exception):
    """
    Exception generated by Matrix class functions
    """
    pass


class Matrix(object):
    """
    Compose, prints matricies by given sequence of numbers
    """
    def __init__(self, size):
        self.size = size
        self.matrix = None

    def from_sequence(self, seq):
        """ f
        """
        self.matrix = [0] * (self.size ** 2)
        size = self.size // 2
        for i, pivots in enumerate(seq):
            matrix_x, matrix_y = i % size, i // size
            matrix_x, matrix_y = self.pivot(matrix_x, matrix_y, pivots)
            self.matrix[matrix_y * self.size + matrix_x] = 1

    def pivot(self, matrix_x, matrix_y, times):
        """
        Returns coordinates after 90 degrees pivot (n times)
        """
        # a[x, y] -> a[n - 1 - y, x]
        x, y = matrix_x, matrix_y
        for _ in xrange(times):
            x, y = self.size - 1 - y, x
        return x, y

    def pprint(self):
        """
        Pretty print
        """
        if self.matrix is None:
            raise MatrixExc("Not initialized matrix")
        for i, elem in enumerate(self.matrix):
            if i % self.size == 0:
                print ""
            if elem == 0:
                elem = '_'
            else:
                elem = 'X'
            print elem,


def main(matrix_size):
    if matrix_size % 2 == 1 or matrix_size < 2:
        raise Exception("Incorrect N value: %s" % matrix_size)
    k = matrix_size // 2

    for seq in sequences(k * k, SYM_NUM):
        if seq[0] != 0:
            continue

        matrix = Matrix(matrix_size)
        matrix.from_sequence(seq)
        matrix.pprint()
        print ""


if __name__ == "__main__":
    MATRIX_SIZE = int(sys.argv[1])
    main(MATRIX_SIZE)
